var documenterSearchIndex = {"docs":
[{"location":"#FourierTools.jl","page":"FourierTools.jl","title":"FourierTools.jl","text":"","category":"section"},{"location":"","page":"FourierTools.jl","title":"FourierTools.jl","text":"Here you can find the docstrings of all functions.","category":"page"},{"location":"#FFT-based-resampling","page":"FourierTools.jl","title":"FFT based resampling","text":"","category":"section"},{"location":"","page":"FourierTools.jl","title":"FourierTools.jl","text":"This allows to sinc interpolate a signal. The resulting size can be larger or smaller.","category":"page"},{"location":"","page":"FourierTools.jl","title":"FourierTools.jl","text":"resample","category":"page"},{"location":"#FourierTools.resample","page":"FourierTools.jl","title":"FourierTools.resample","text":"resample(arr, new_size [, normalize])\n\nCalculates the sinc interpolation of an arr on a new array size new_size. It is a re-evaluation of the Fourier series at new grid points. new_size can be arbitrary. Each dimension is then independently either up or downsampled. This method is based on FFTs and therefore implicitly assumes periodic boundaries and a finite frequency support. normalize=true by default multiplies by an appropriate factor so that  the average intensity stays the same. If size(new_size)[i] > size(arr)[i], we apply zero padding in Fourier space. If size(new_size)[i] < size(arr)[i], we cut out a centered part of the Fourier spectrum. We apply some tricks at the boundary to increase accuracy of highest frequencies.  ```\n\n\n\n\n\n","category":"function"},{"location":"#FFT-helpers","page":"FourierTools.jl","title":"FFT helpers","text":"","category":"section"},{"location":"","page":"FourierTools.jl","title":"FourierTools.jl","text":"ft\nift\nrft\nirft\nFourierTools.fftshift_view\nFourierTools.ifftshift_view","category":"page"},{"location":"#FourierTools.ft","page":"FourierTools.jl","title":"FourierTools.ft","text":"ft(A [, dims])\n\nDigital Fourier-transformation centered in both spaces. The result is semantically equivalent to fftshift(fft(ifftshift(A, dims), dims), dims) This is a digital Fourier transformation with both coordinate systems in real and Fourier-space being centered at position CtrFT == size÷2+1\n\nThe following identities are true: ft(ones(sz)) ≈ prod(sz) .* delta(sz) ft(delta(sz)) ≈ ones(sz)\n\n#see also: ift, rft, irft, ffts, iffts However, the shift is done with ShiftedArrays and therefore doesn't allocate memory.\n\n\n\n\n\n","category":"function"},{"location":"#FourierTools.ift","page":"FourierTools.jl","title":"FourierTools.ift","text":"ift(A [, dims])\n\nDigital inverse Fourier-transformation centered in both spaces.\nThe result is semantically equivalent to `fftshift(ifft(ifftshift(A, dims), dims), dims)`\nThis is a digital Fourier transformation with both coordinate systems in real and Fourier-space being\ncentered at position CtrFT == size÷2+1\n\nThe following identities are true:\nift(ones(sz)) ≈ delta(sz)\nift(delta(sz)) ≈ ones(sz) ./ prod(sz)\n\n#see also: ft, rft, irft, ffts, iffts\n\n\n\n\n\n","category":"function"},{"location":"#FourierTools.rft","page":"FourierTools.jl","title":"FourierTools.rft","text":"rft(A [, dims])\n\nDigital real-valued Fourier-transformation centered in both spaces.\nThe result is semantically equivalent to `fftshift(rfft(ifftshift(A, dims), dims), dims)`\nThis is a digital Fourier transformation with the coordinate systems in real space centered at CtrFT == size÷2+1\nand in (half) Fourier-space being centered at CtrRFT == setindex(size÷2 +1,1,1).\n\nThe following identities are true:\nrft(ones(sz)) ≈ prod(sz) .* delta(rft_size(sz), offset=CtrRFT)\nrft(delta(sz)) ≈ ones(rft_size(sz))\n\n#see also: ft, ift, irft, ffts, iffts\n\n\n\n\n\n","category":"function"},{"location":"#FourierTools.irft","page":"FourierTools.jl","title":"FourierTools.irft","text":"irft(A, d, [, dims])\n\nDigital real-valued inverse Fourier-transformation centered in both spaces.\nThe result is semantically equivalent to `fftshift(irfft(ifftshift(A, dims), dims), dims)`\nThis is a digital Fourier transformation with the coordinate systems in real space centered at CtrFT == size÷2+1\nand in (half) Fourier-space being centered at CtrRFT == setindex(size÷2 +1,1,1).\nNote that the size `d` of the first transform direction [1] is a required argument.\n\nThe following identities are true:\nirft(ones(rft_size(sz)),sz[1]) ≈ delta(sz)\nirft(delta(rft_size(sz),offset=CtrRFT),sz[1]) ≈ ones(sz) ./ prod(sz)\n\n#see also: ft, ift, rft, ffts, iffts\n\n\n\n\n\n","category":"function"},{"location":"#FourierTools.fftshift_view","page":"FourierTools.jl","title":"FourierTools.fftshift_view","text":"fftshift_view(A [, dims])\n\nResult is semantically equivalent to fftshift(A, dims) but returns  a view instead. \n\n\n\n\n\n","category":"function"},{"location":"#FourierTools.ifftshift_view","page":"FourierTools.jl","title":"FourierTools.ifftshift_view","text":"ifftshift_view(A [, dims])\n\nResult is semantically equivalent to fftshift(A, dims) but returns  a view instead. \n\n\n\n\n\n","category":"function"}]
}
